/**
 * Copyright 2015-2019 Maven Source Dependencies
 * Plugin contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.srcdeps.mvn.plugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.srcdeps.core.config.Maven;
import org.srcdeps.core.util.SrcdepsCoreUtils;
import org.srcdeps.mvn.Constants;

import io.takari.maven.testing.TestResources;
import io.takari.maven.testing.executor.MavenExecution;
import io.takari.maven.testing.executor.MavenRuntime;
import io.takari.maven.testing.executor.MavenRuntime.MavenRuntimeBuilder;
import io.takari.maven.testing.executor.MavenVersions;
import io.takari.maven.testing.executor.junit.MavenJUnitTestRunner;

@RunWith(MavenJUnitTestRunner.class)
@MavenVersions({ "3.3.1" })
public class SrcdepsInitMojoTest {
    private static final Path basedir = Paths.get(System.getProperty("basedir", new File("").getAbsolutePath()));

    private static final String encoding = System.getProperty("project.build.sourceEncoding");

    private static final String EXTENSIONS_XML_TEMPLATE = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + //
            "<extensions>\n" + //
            "  <extension>\n" + //
            "    <groupId>org.srcdeps.mvn</groupId>\n" + //
            "    <artifactId>srcdeps-maven-local-repository</artifactId>\n" + //
            "    <version>%s</version>\n" + //
            "  </extension>\n" + //
            "  <extension>\n" + //
            "    <groupId>org.srcdeps.mvn</groupId>\n" + //
            "    <artifactId>srcdeps-maven-enforcer</artifactId>\n" + //
            "    <version>%s</version>\n" + //
            "  </extension>\n" + //
            "</extensions>\n";

    private static final Logger log = LoggerFactory.getLogger(SrcdepsInitMojoTest.class);

    private static final String mrmSettingsXmlPath = System.getProperty("mrm.settings.xml");

    private static final Path mvnLocalRepo;
    private static final String projectVersion = System.getProperty("project.version");
    private static final String SRCDEPS_YAML_EXPECTED = "#\n" + //
            "# srcdeps.yaml - the srcdeps configuration file\n" + //
            "#\n" + //
            "# The full srcdeps.yaml reference can be found under https://github.com/srcdeps/srcdeps-core/tree/master/doc/srcdeps.yaml\n"
            + //
            "#\n" + //
            "# This file was generated by the following command:\n" + //
            "#\n" + //
            "#     mvn org.srcdeps.mvn:srcdeps-maven-plugin:init\n" + //
            "#\n" + //
            "configModelVersion: 3.0\n" + //
            "repositories:\n" + //
            "  org.srcdeps.core:\n" + //
            "    includes:\n" + //
            "    - org.srcdeps.core\n" + //
            "    urls:\n" + //
            "    - git:git@github.com:srcdeps/srcdeps-core.git\n";
    static {
        mvnLocalRepo = basedir.resolve("target/mvn-local-repo");
    }

    @BeforeClass
    public static void beforeClass() throws IOException {

        SrcdepsCoreUtils.ensureDirectoryExistsAndEmpty(mvnLocalRepo);

        System.setProperty(Maven.getSrcdepsMavenSettingsProperty(), mrmSettingsXmlPath);

        // Assert.assertTrue("[" + mrmSettingsXmlPath + "] should exist", Files.exists(Paths.get(mrmSettingsXmlPath)));
        Assert.assertNotNull("project.build.sourceEncoding property must be set", encoding);
        Assert.assertNotNull("project.version property must be set", projectVersion);
    }

    @Rule
    public final TestResources resources = new TestResources();

    public final MavenRuntime verifier;

    public SrcdepsInitMojoTest(MavenRuntimeBuilder runtimeBuilder) throws Exception {
        this.verifier = runtimeBuilder.withExtension(new File("target/classes").getCanonicalFile()).build();
    }

    @Test
    public void initNoArgs() throws Exception {

        File projDir = resources.getBasedir("parent-with-jar");

        MavenExecution mavenExec = verifier.forProject(projDir) //
                .withCliOption("-e");

        final String srcdepsVersion = Constants.SRCDEPS_MAVEN_VERSION;

        Assert.assertEquals(projectVersion, srcdepsVersion);

        final File srcdepsYamlPath = new File(projDir, "srcdeps.yaml");
        Assert.assertFalse(
                String.format("The file [%s] must not exist before the test", srcdepsYamlPath.getAbsolutePath()),
                srcdepsYamlPath.exists());

        final File extensionsXmlPath = new File(projDir, ".mvn/extensions.xml");
        Assert.assertFalse(
                String.format("The file [%s] must not exist before the test", extensionsXmlPath.getAbsolutePath()),
                extensionsXmlPath.exists());

        mavenExec //
                .execute("org.srcdeps.mvn:srcdeps-maven-plugin:" + projectVersion + ":init") //
                .assertErrorFreeLog();

        String srcdepsYamlContent = new String(Files.readAllBytes(srcdepsYamlPath.toPath()), "utf-8");
        Assert.assertEquals(SRCDEPS_YAML_EXPECTED, srcdepsYamlContent);

        String extensionsXmlContent = new String(Files.readAllBytes(extensionsXmlPath.toPath()), "utf-8");
        Assert.assertEquals(String.format(EXTENSIONS_XML_TEMPLATE, srcdepsVersion, srcdepsVersion),
                extensionsXmlContent);
    }

}
